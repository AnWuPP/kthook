name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { title: "linux"         , os: "ubuntu-latest" , cc: "gcc"     , arch: "x86", build_type: "Debug"  , defs: "KTHOOK_TEST=ON" }
          - { title: "linux"         , os: "ubuntu-latest" , cc: "gcc"     , arch: "x86", build_type: "Release", defs: "KTHOOK_TEST=ON" }
          - { title: "linux"         , os: "ubuntu-latest" , cc: "gcc"     , arch: "x64", build_type: "Debug"  , defs: "KTHOOK_TEST=ON" }
          - { title: "linux"         , os: "ubuntu-latest" , cc: "gcc"     , arch: "x64", build_type: "Release", defs: "KTHOOK_TEST=ON" }
          - { title: "linux"         , os: "ubuntu-latest" , cc: "clang"   , arch: "x86", build_type: "Debug"  , defs: "KTHOOK_TEST=ON" }
          - { title: "linux"         , os: "ubuntu-latest" , cc: "clang"   , arch: "x86", build_type: "Release", defs: "KTHOOK_TEST=ON" }
          - { title: "linux"         , os: "ubuntu-latest" , cc: "clang"   , arch: "x64", build_type: "Debug"  , defs: "KTHOOK_TEST=ON" }
          - { title: "linux"         , os: "ubuntu-latest" , cc: "clang"   , arch: "x64", build_type: "Release", defs: "KTHOOK_TEST=ON" }

          - { title: "windows"       , os: "windows-latest", cc: "vs2019"  , arch: "x86", build_type: "Debug"  , defs: "KTHOOK_TEST=ON" }
          - { title: "windows"       , os: "windows-latest", cc: "vs2019"  , arch: "x86", build_type: "Release", defs: "KTHOOK_TEST=ON" }
          - { title: "windows"       , os: "windows-latest", cc: "vs2019"  , arch: "x64", build_type: "Debug"  , defs: "KTHOOK_TEST=ON" }
          - { title: "windows"       , os: "windows-latest", cc: "vs2019"  , arch: "x64", build_type: "Release", defs: "KTHOOK_TEST=ON" }
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: "${{matrix.title}} (${{matrix.cc}}, ${{matrix.arch}}, ${{matrix.build_type}})"
    runs-on: "${{matrix.os}}"

    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.build_type}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.build_type}}
  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run clang-format style check for C/C++/Protobuf programs.
      uses: jidicula/clang-format-action@v4.4.0
      with:
        clang-format-version: '13'
        check-path: 'include'
        fallback-style: 'Google'
      
